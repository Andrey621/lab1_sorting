#pragma once
#include "ISorter.hpp"
#include "for_creating_sequences.hpp"

void keyboard_int_test(int choose){
    Sequence<int>* pointer;
    BubbleSorter<int> q;
    QuickSorter<int> w;
    ShellSorter<int> e;
    ShakerSorter<int> r;
    InsertSorter<int> t;
    MergeSorter<int> y;
    HeapSorter<int> u;
    CountSorter<int> i;
    cout<<"Input dimension"<<"\n";
    int dimension;
    cin>>dimension;
    int* array = MakeKeyboardSequence<int>(dimension);
    if(choose == 1){
        ArraySequence<int> a(array, dimension);
        ArraySequence<int> b(array, dimension);
        ArraySequence<int> c(array, dimension);
        ArraySequence<int> d(array, dimension);
        ArraySequence<int> f(array, dimension);
        ArraySequence<int> g(array, dimension);
        ArraySequence<int> h(array, dimension);
        ArraySequence<int> j(array, dimension);
        cout<<"Tested Array"<<"\n";
        a.Print();
        cout<<"\n";
        pointer = &a;
        q.sort(pointer);
        cout<<"Bubble Sort"<<"\n";
        a.Print();
        cout<<"\n";
        pointer = &b;
        y.sort(pointer);
        cout<<"Merge Sort"<<"\n";
        b.Print();
        cout<<"\n";
        pointer = &c;
        e.sort(pointer);
        cout<<"Shell Sort"<<"\n";
        c.Print();
        cout << "\n";
        pointer = &d;
        r.sort(pointer);
        cout<<"Shaker Sort"<<"\n";
        d.Print();
        cout<<"\n";
        pointer = &f;
        t.sort(pointer);
        cout<<"Insert Sort"<<"\n";
        f.Print();
        cout<<"\n";
        pointer = &g;
        w.sort(pointer);
        cout<<"Quick Sort"<<"\n";
        g.Print();
        cout<<"\n";
        pointer = &h;
        u.sort(pointer);
        cout<<"Heap Sort"<<"\n";
        h.Print();
        cout<<"\n";
        pointer = &j;
        i.sort(pointer);
        cout<<"Count Sort"<<"\n";
        j.Print();
        cout<<"\n";
    }
    else{
        ListSequence<int> a(array, dimension);
        ListSequence<int> b(array, dimension);
        ListSequence<int> c(array, dimension);
        ListSequence<int> d(array, dimension);
        ListSequence<int> f(array, dimension);
        ListSequence<int> g(array, dimension);
        ListSequence<int> h(array, dimension);
        ListSequence<int> j(array, dimension);
        cout<<"Tested List"<<"\n";
        a.Print();
        cout<<"\n";
        pointer = &a;
        q.sort(pointer);
        cout<<"Bubble Sort"<<"\n";
        a.Print();
        cout<<"\n";
        pointer = &b;
        y.sort(pointer);
        cout<<"Merge Sort"<<"\n";
        b.Print();
        cout<<"\n";
        pointer = &c;
        e.sort(pointer);
        cout<<"Shell Sort"<<"\n";
        c.Print();
        cout<<"\n";
        pointer = &d;
        r.sort(pointer);
        cout<<"Shaker Sort"<<"\n";
        d.Print();
        cout<<"\n";
        pointer = &f;
        t.sort(pointer);
        cout<<"Insert Sort"<<"\n";
        f.Print();
        cout<<"\n";
        pointer = &g;
        w.sort(pointer);
        cout<<"Quick Sort"<<"\n";
        g.Print();
        cout<<"\n";
        pointer = &h;
        u.sort(pointer);
        cout<<"Heap Sort"<<"\n";
        h.Print();
        cout<<"\n";
        pointer = &j;
        i.sort(pointer);
        cout<<"Count Sort"<<"\n";
        j.Print();
        cout<<"\n";
    }
}

void keyboard_float_test(int choose){
    Sequence<float>* pointer;
    BubbleSorter<float> q;
    QuickSorter<float> w;
    ShellSorter<float> e;
    ShakerSorter<float> r;
    InsertSorter<float> t;
    MergeSorter<float> y;
    HeapSorter<float> u;
    CountSorter<float> i;
    cout<<"Input dimension"<<"\n";
    int dimension;
    cin>>dimension;
    float* array = MakeKeyboardSequence<float>(dimension);
    if(choose == 1){
        ArraySequence<float> a(array, dimension);
        ArraySequence<float> b(array, dimension);
        ArraySequence<float> c(array, dimension);
        ArraySequence<float> d(array, dimension);
        ArraySequence<float> f(array, dimension);
        ArraySequence<float> g(array, dimension);
        ArraySequence<float> h(array, dimension);
        ArraySequence<float> j(array, dimension);
        cout<<"Tested Array"<<"\n";
        a.Print();
        cout<<"\n";
        pointer = &a;
        q.sort(pointer);
        cout<<"Bubble Sort"<<"\n";
        a.Print();
        cout<<"\n";
        pointer = &b;
        y.sort(pointer);
        cout<<"Merge Sort"<<"\n";
        b.Print();
        cout<<"\n";
        pointer = &c;
        e.sort(pointer);
        cout<<"Shell Sort"<<"\n";
        c.Print();
        cout<<"\n";
        pointer = &d;
        r.sort(pointer);
        cout<<"Shaker Sort"<<"\n";
        d.Print();
        cout<<"\n";
        pointer = &f;
        t.sort(pointer);
        cout<<"Insert Sort"<<"\n";
        f.Print();
        cout<<"\n";
        pointer = &g;
        w.sort(pointer);
        cout<<"Quick Sort"<<"\n";
        g.Print();
        cout<<"\n";
        pointer = &h;
        u.sort(pointer);
        cout<<"Heap Sort"<<"\n";
        h.Print();
        cout<<"\n";
        pointer = &j;
        i.sort(pointer);
        cout<<"Count Sort"<<"\n";
        j.Print();
        cout<<"\n";
    }
    else{
        ListSequence<float> a(array, dimension);
        ListSequence<float> b(array, dimension);
        ListSequence<float> c(array, dimension);
        ListSequence<float> d(array, dimension);
        ListSequence<float> f(array, dimension);
        ListSequence<float> g(array, dimension);
        ListSequence<float> h(array, dimension);
        ListSequence<float> j(array, dimension);
        cout<<"Tested List"<<"\n";
        a.Print();
        cout<<"\n";
        pointer = &a;
        q.sort(pointer);
        cout<<"Bubble Sort"<<"\n";
        a.Print();
        cout<<"\n";
        pointer = &b;
        y.sort(pointer);
        cout<<"Merge Sort"<<"\n";
        b.Print();
        cout<<"\n";
        pointer = &c;
        e.sort(pointer);
        cout<<"Shell Sort"<<"\n";
        c.Print();
        cout<<"\n";
        pointer = &d;
        r.sort(pointer);
        cout<<"Shaker Sort"<<"\n";
        d.Print();
        cout<<"\n";
        pointer = &f;
        t.sort(pointer);
        cout<<"Insert Sort"<<"\n";
        f.Print();
        cout<<"\n";
        pointer = &g;
        w.sort(pointer);
        cout<<"Quick Sort"<<"\n";
        g.Print();
        cout<<"\n";
        pointer = &h;
        u.sort(pointer);
        cout<<"Heap Sort"<<"\n";
        h.Print();
        cout<<"\n";
        pointer = &j;
        i.sort(pointer);
        cout<<"Count Sort"<<"\n";
        j.Print();
        cout<<"\n";
    }
}
