#pragma once
#include "sequence.hpp"
#include "ArraySequence.hpp"
#include "ISorter.hpp"
void ready_int_sort_test(int choose){
    BubbleSorter<int> q;
    QuickSorter<int> w;
    ShellSorter<int> e;
    ShakerSorter<int> r;
    InsertSorter<int> t;
    MergeSorter<int> y;
    HeapSorter<int> u;
    CountSorter<int> i;
    Sequence<int> *seq;
    int test_arr[15] = {65, 38, 291, 47, 3, 8, 17, 5, 39, 43, 85, 11, 90, 123, 64};
    if(choose == 1) {
        ArraySequence<int> a(test_arr, 15);
        ArraySequence<int> b(test_arr, 15);
        ArraySequence<int> c(test_arr, 15);
        ArraySequence<int> d(test_arr, 15);
        ArraySequence<int> f(test_arr, 15);
        ArraySequence<int> g(test_arr, 15);
        ArraySequence<int> h(test_arr, 15);
        ArraySequence<int> j(test_arr, 15);
        cout << "Tested Array" << "\n";
        a.Print();
        cout << "\n";
        seq = &a;
        q.sort(seq);
        cout << "Bubble Sort" << "\n";
        a.Print();
        cout << "\n";
        seq = &b;
        e.sort(seq);
        cout<<"Shell Sort"<<"\n";
        b.Print();
        cout<<"\n";
        seq = &c;
        w.sort(seq);
        cout<<"Quick Sort"<<"\n";
        c.Print();
        cout << "\n";
        seq = &d;
        r.sort(seq);
        cout<<"Shaker Sort"<<"\n";
        d.Print();
        cout << "\n";
        seq = &f;
        t.sort(seq);
        cout << "Insert Sort" << "\n";
        f.Print();
        cout<<"\n";
        seq = &g;
        y.sort(seq);
        cout << "Merge Sort" << "\n";
        g.Print();
        cout << "\n";
        seq = &h;
        u.sort(seq);
        cout << "Heap Sort" << "\n";
        h.Print();
        cout << "\n";
        seq = &j;
        i.sort(seq);
        cout << "Count Sort" << "\n";
        j.Print();
        cout << "\n";
    }
    else {
        ListSequence<int> a(test_arr, 15);
        ListSequence<int> b(test_arr, 15);
        ListSequence<int> c(test_arr, 15);
        ListSequence<int> d(test_arr, 15);
        ListSequence<int> f(test_arr, 15);
        ListSequence<int> g(test_arr, 15);
        ListSequence<int> h(test_arr, 15);
        ListSequence<int> j(test_arr, 15);
        cout << "Tested List" << "\n";
        a.Print();
        cout << "\n";
        seq = &a;
        q.sort(seq);
        cout << "Bubble Sort" << "\n";
        a.Print();
        cout << "\n";
        seq = &b;
        e.sort(seq);
        cout<<"Shell Sort"<<"\n";
        b.Print();
        cout<<"\n";
        seq = &c;
        w.sort(seq);
        cout<<"Quick Sort"<<"\n";
        c.Print();
        cout<<"\n";
        seq = &d;
        r.sort(seq);
        cout<<"Shaker Sort"<<"\n";
        d.Print();
        cout << "\n";
        seq = &f;
        t.sort(seq);
        cout << "Bubble Sort" << "\n";
        f.Print();
        cout << "\n";
        seq = &g;
        y.sort(seq);
        cout << "Merge Sort" << "\n";
        g.Print();
        cout << "\n";
        seq = &h;
        u.sort(seq);
        cout << "Heap Sort" << "\n";
        h.Print();
        cout << "\n";
        seq = &j;
        i.sort(seq);
        cout << "Count Sort" << "\n";
        j.Print();
        cout << "\n";
    }
}

void ready_float_sort_test(int choose){
    BubbleSorter<float> q;
    QuickSorter<float> w;
    ShellSorter<float> e;
    ShakerSorter<float> r;
    InsertSorter<float> t;
    MergeSorter<float> y;
    HeapSorter<float> u;
    CountSorter<float> i;
    Sequence<float> *seq;
    float test_arr[15] = {2.78, 3.6, 9.8, 32.1, 5.09, 7.54, 3.89, 8.2, 47.21, 28.37, 3.42, 102.84, 6.8, 399.56, 4.3};
    if(choose == 1) {
        ArraySequence<float> a(test_arr, 15);
        ArraySequence<float> b(test_arr, 15);
        ArraySequence<float> c(test_arr, 15);
        ArraySequence<float> d(test_arr, 15);
        ArraySequence<float> f(test_arr, 15);
        ArraySequence<float> g(test_arr, 15);
        ArraySequence<float> h(test_arr, 15);
        ArraySequence<float> j(test_arr, 15);
        cout << "Tested Array" << "\n";
        a.Print();
        cout << "\n";
        seq = &a;
        q.sort(seq);
        cout << "Bubble Sort" << "\n";
        a.Print();
        cout << "\n";
        seq = &b;
        e.sort(seq);
        cout<<"Shell Sort"<<"\n";
        b.Print();
        cout<<"\n";
        seq = &c;
        w.sort(seq);
        cout<<"Quick Sort"<<"\n";
        c.Print();
        cout << "\n";
        seq = &d;
        r.sort(seq);
        cout << "Shaker Sort" << "\n";
        d.Print();
        cout << "\n";
        seq = &f;
        t.sort(seq);
        cout << "Insert Sort" << "\n";
        f.Print();
        cout << "\n";
        seq = &g;
        y.sort(seq);
        cout << "Merge Sort" << "\n";
        g.Print();
        cout << "\n";
        seq = &h;
        u.sort(seq);
        cout << "Heap Sort" << "\n";
        h.Print();
        cout << "\n";
        seq = &j;
        i.sort(seq);
        cout << "Count Sort" << "\n";
        j.Print();
        cout << "\n";
    }
    else {
        ListSequence<float> a(test_arr, 15);
        ListSequence<float> b(test_arr, 15);
        ListSequence<float> c(test_arr, 15);
        ListSequence<float> d(test_arr, 15);
        ListSequence<float> f(test_arr, 15);
        ListSequence<float> g(test_arr, 15);
        ListSequence<float> h(test_arr, 15);
        ListSequence<float> j(test_arr, 15);
        cout << "Tested List" << "\n";
        a.Print();
        cout << "\n";
        seq = &a;
        q.sort(seq);
        cout << "Bubble Sort" << "\n";
        a.Print();
        cout << "\n";
        seq = &b;
        e.sort(seq);
        cout<<"Shell Sort"<<"\n";
        b.Print();
        cout<<"\n";
        seq = &c;
        w.sort(seq);
        cout<<"Quick Sort"<<"\n";
        c.Print();
        cout<<"\n";
        seq = &d;
        r.sort(seq);
        cout<<"Shaker Sort"<<"\n";
        d.Print();
        cout<<"\n";
        seq = &f;
        t.sort(seq);
        cout<<"Insert Sort"<<"\n";
        f.Print();
        cout << "\n";
        seq = &g;
        y.sort(seq);
        cout << "Merge Sort" << "\n";
        g.Print();
        cout << "\n";
        seq = &h;
        u.sort(seq);
        cout << "Heap Sort" << "\n";
        h.Print();
        cout << "\n";
        seq = &j;
        i.sort(seq);
        cout << "Count Sort" << "\n";
        j.Print();
        cout << "\n";
    }
}
